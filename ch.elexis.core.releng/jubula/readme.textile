h1. Wiki

See also our "Wiki":https://bitbucket.org/ngiger/jubula-elexis/wiki/Home

h2. Using the Jubula GUI

* Install Jubula Standalone Version 8.0 from "Bredex":http://testing.bredex.de/ (Subscribe necessary, no costs involved)
* @cd ch.elexis.core.releng/ && mvn clean install && cd jubula@
* @export WORKSPACE=${PWD}@
* @jubula -data workspace/ &@  # Launch jubula
* unzip the needed rcp-plugins 
* Launch Jubulas auxillary program @autagent@
* @jubula -data workspace/ &@ Start the Jubula GUI

# In Jubula select Test..Import and select the @ElexisDemo1.0.xml@ file.
# Connect to the agent
# Enter in "Test..Properties" the correct path for the AUT (elexis)
!images/jubula_2.png!
!images/jubula_3.png!
!images/jubula_4.png!
# Start the AUT
# Skip the dialog about warning
!images/jubula_2.png!
# Run the test-suite @sample@

I recommend installing the "Jubula database drivers" (via the Marketplace) and use either MySQL or PostgreSQL as the database for development.

The automated tests (via Ruby) use the embedded H2 in the subdirectory database of the workspace.

Tested under Debian Wheezy

h2. contributor hints

* After installing xmllint I added in my .git/commit/pre-commit the line @@exec ch.elexis.core.releng/jubula/format_xml.rb ch.elexis.core.releng/jubula/*.xml@@ to prettify the test.xml

h3. requirements (s.a. docker/Dockerfile and docker/install.sh)

* Jubula 8.0.00170
* Java7
* Ruby >= 1.9.0
* xclip
** gem xml-simple
** gem zip

h2. Running via Jenkins-CI

Running the GUI-tests via Jenkins-CI consumed much time to find the best setup. Here my experiences. I used a matrix build to enable specifying various TEST_SUITE.

I was unable to find a unified setup for Windows, MacOSX and Jubula, as some use %VAR% or $VAR and Linux needs to start an xvfb for an headless build.

Common steps for each slave
* Install Java version 1.7.55
* Install maven 3.0.5
* Install Ruby 1.9 or above
* Install git 1.8 or above
* Install jubula 8.0 
** Linux: under /opt/jubula_*version*
** MacOSX: under /Applications/jubula_*version*
** Windows: under  C:\Programm Files\jubula_*version*  or E:\jubula_*version*

Verify manually that the following commands run (which we will run via Jenkins CI)
* @git checkout https://github.com/elexis/elexis-3-core.git && cd elexis-3-core@
* @mvn clean install -Pall-arch -Dmaven.test.skip@
* @bundle install@
* @@bundle exec ruby ch.elexis.core.releng/jubula/run_jenkins.rb NAME_OF_TEST_SUITE_TO_RUN@

If you want to use a downloaded *.zip file change it
* @wget URL_to_zip@
* @mvn clean install -Pall-arch -Dmaven.test.skip@
* @bundle install@
* @@bundle exec ruby ch.elexis.core.releng/jubula/run_jenkins.rb -i downloaded.zip NAME_OF_TEST_SUITE_TO_RUN@

OS-specific considerations

h3. Windows slave

Setup a Virtual Machine. Launching slave "Slaves":https://srv.elexis.info/jenkins/computer/windows-7/. Using "Launch" start agent from web-browser.

h3. MacOSX slave

Use xvfb (Installed via X11-Server from the developpers tools). Using "Launch" start agent from web-browser. Xvfb-setup binary /usr/X11/bin/xvfb. I was unable to run the tests using an ssh-shell from another computer to MacOSX or using launchctl to run @java -jar slave.jar -noCertificateCheck -jnlpUrl https://srv.elexis.info/jenkins/computer/MacOSX-64-bit/slave-agent.jnlp@

Tried xvfb Shutdown Xvfb with whole job, not just with the main build action, 	Xvfb installation.

It is also necessary to ensure that the MacOSX does enter sleep mode or active the screen saver or the builds get stuck.

h3. Linux slave

In theory using xvfb under Linux to enable a headless build should be easy. I found however that this does not work correctly. Therefore I use start manually the a linux slave on a separate screen.


h2. TODO

* Decide on how to handle more feature. Do we want one jubula-testsuite per feature
* Speed up tests. Maybe requiring a mysql per slave or even a common one would allow to reload only when the SHA of the Test-XML has changed.
** On Linux take 1'40" till TST_UPGRADE starts
** After 3'15 TST_UPGRADE is finished
** SMOKETEST takes about 1 minute + 3'15 for TST_UPGRADE
** FULLTEST takes about 18 minutes + 3'15 for TST_UPGRADE
* Rework some dialogs, eg. date entry of new Fall to accept text values. Testing the date entry is impossible with Jubula.
* Some timing are quite conservative as especially the Windows slave is often very slow
* Design for testability. See this chapter in the Jubula manual, where it says
bc. Although components can be located in the AUT even when they are not named by the developers, naming components is nevertheless a good idea.
In SWT and RCP there is no method like the Swing setName method to name components in the program code.
However, you can improve the testability of your application by using the following method in your SWT or RCP code for the current component class: setData(String key, String ComponentName). For the key, use TEST_COMP_NAME.
Even if you do not name components, you can choose to have unique names generated for your components in the AUT in the AUT dialog 3.6.
* Adding support for text retrieval
bc. You can add support for renderers for SWT components or items without the getText() method in order to access text that is otherwise non-readable during test execution.
Use the method "setData(String key, Object value)" on the instance of the component or item whose text you want to access. The key is "TEST_TESTABLE_TEXT"
For example, to access an otherwise unreachable text on a label:
"myLabel.setData("TEST_TESTABLE_TEXT", label);"
If you are making text in e.g. a table accessible, then you will need to add a dynamic part for the column, e.g.: 
myTableItemInstance.setData("TEST_TESTABLE_TEXT_" + colIdx, text);
* Should we rework iterating over all Preferences/Vies using the available feature and throw away the ruby script for patching the xml file?


bc. Example diff
diff --git a/ch.elexis.core.ui/src/ch/elexis/core/ui/views/artikel/ArtikelView.java b/ch.elexis.core.ui/src/ch/elexis/core/ui/views/artikel/ArtikelView.java
index 50d314f..103e9f2 100644
--- a/ch.elexis.core.ui/src/ch/elexis/core/ui/views/artikel/ArtikelView.java
+++ b/ch.elexis.core.ui/src/ch/elexis/core/ui/views/artikel/ArtikelView.java
@@ -65,6 +65,7 @@ public class ArtikelView extends ViewPart implements IActivationListener, ISavea
        @Override
        public void createPartControl(Composite parent){
                parent.setLayout(new FillLayout());
+               parent.setData("TEST_COMP_NAME", "Elexis_Core_UI_ArtikelView");
                ctab = new CTabFolder(parent, SWT.NONE);
                ctab.setData("TEST_COMP_NAME", "Elexis_Core_UI_ArtikelView_CTab");
                importers = new Hashtable<String, ImporterPage>();
@@ -188,6 +189,7 @@ public class ArtikelView extends ViewPart implements IActivationListener, ISavea
                                                (CodeSelectorFactory) ce.createExecutableExtension("CodeSelectorFactory");
                                        MasterDetailsPage page = new MasterDetailsPage(ctab, csf, d);
                                        CTabItem ct = new CTabItem(ctab, SWT.None);
+                                       ct.setData("TEST_COMP_NAME", "Elexis_Core_UI_ArtikelView"+d.getTitle());
                                        ct.setText(d.getTitle());
                                        ct.setControl(page);
                                        ct.setData(d);

    control.setData("TEST_COMP_NAME", "Elexis_Core_UI_ArtikelView_CTab");
cv.getViewerWidget().getControl().setData("TEST_COMP_NAME", "Elexis_Core_UI_ArtikelView_CTab");