<project xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd' xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>
  <modelVersion> 4.0.0 </modelVersion>
  <parent>
    <groupId>ch.elexis</groupId>
    <artifactId>elexis-3-core</artifactId>
    <version>3.0.0-SNAPSHOT</version>
  </parent>
  <groupId>ch.elexis</groupId>
  <artifactId>ch.elexis.core.data</artifactId>
  <version>3.1.0-SNAPSHOT</version>
  <packaging>eclipse-plugin</packaging>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>groovy-maven-plugin</artifactId>
        <version>2.0</version>
          <executions>
            <execution>
              <id>set-properties</id>
              <phase>validate</phase>
              <goals>
                <goal>execute</goal>
              </goals>
              <configuration>
<!--
if you reference project.properties.repo_variant it will always report snapshot as this is default in the parent pom.xml
if your referenc repo_variant it will return the value passed on the command line or (if not specified there) the default-value
Did cost me two hours to find it and to work around!
!-->
<!-- git tag - -contains | grep release | cut -d/ -f2 -->
              <source>
import java.text.SimpleDateFormat;
String repo_variant = "${repo_variant}" // project.properties.getProperty('repo_variant') always return snapshot
// println 'repo_variant is ' + repo_variant
String elexis_version = "${project.version}".replace("-SNAPSHOT", "") + new SimpleDateFormat("'"+repo_variant.substring(0,1).replaceFirst('s','a').replaceFirst('p','r')+"'yyyyMMdd-HHmm").format(Calendar.getInstance().getTime())
// println 'elexis_version is ' + elexis_version
String tags =  "git tag --contains ".execute().text.split("\n")
// println 'tags is ' + tags
for ( i in tags ) {
    // println 'i ist ' + i
    if (i ==~/release\/(.*)/ ) {
        elexis_version = (i=~ /release\//).replaceFirst("")
        // println 'elexis_version is now ' + elexis_version
        break
    }
}
                println "versionFromPomViaGroovy is " +  elexis_version + " from version " + project.version + " and repo_variant " +  project.properties.getProperty('repo_variant')
                project.properties.setProperty('versionFromPomViaGroovy', elexis_version)
              </source>
              </configuration>
            </execution>
        </executions>
      </plugin>
    </plugins>
    <resources>
      <resource>
        <directory>rsc</directory>
        <!-- where we have there our version.properties -->
        <filtering>true</filtering>
      </resource>
    </resources>
  </build>
</project>