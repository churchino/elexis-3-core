h1. Elexis 3 Core Repository

*IMPORTANT* Please employ the @3lexisFormatterProfile.xml@ as Eclipse default formatter prior to development and pull requests.
This accounts for all Elexis 3 related development.

h2. Install latest build

Go to "Jenkins-CI Builds":https://srv.elexis.info/jenkins/view/3.0/job/Elexis-3.0-Core/lastSuccessfulBuild/artifact/ch.elexis.core.p2site/target/products/. Download and unzip the zip file for your machine.

Install Oracle java 1.8 from "http://www.java.com/de/download/manual.jsp":http://www.java.com/de/download/manual.jsp

Start the Elexis3 application.


h2. Building

You need Java 1.8+. Maven (we use 3.0.5 for our builds, other versions might work). Then you should be able to generate the application and p2 update site using the following calls:

@git clone https://github.com/elexis/elexis-3-core@
@mvn clean install@

It will be built for your OS/Window-System/Architecture combination. You will find the executables under @ch.elexis.core.p2site/target/products/ch.elexis.core.application.ElexisApp/*/*/*@ 

If you want a complete development environment, try "Oomph":https://github.com/elexis/elexis-3-core/tree/master/ch.elexis.sdk

h2. Developer Overview

This repository hosts the core Elexis 3. It consists of the following plug-ins and features:

* @ch.rgw.utility@ Utilities required to drive Elexis.
* @ch.elexis.core@ Core concepts and interface definitions.
* @ch.elexis.core.data@ Core persistence and functionality packages and classes.
* @ch.elexis.core.console.application@ Headless Elexis application.
* @ch.elexis.core.ui@ User Interface dependent portions. Dependent on Eclipse RCP 3.x.
* @ch.elexis.core.application@ Core UI Elexis Application.

* @ch.elexis.core.releng@ Release Engineering specific parts (Build Target, 3rd party ...)

* @ch.elexis.core.logging@ Plug-In for starting ch.qos.logback logging (via slf4j interface)
* @ch.elexis.core.logging.feature@ Feature for logging and Felix-gogo console
* @ch.elexis.core.logging.default_configuration@ Default logging configuration (logback.xml)

* @ch.elexis.core.ui.icons@ Plug-In for central icon management.
* @ch.elexis.core.ui.contacts@ Plug-In for contact management.
* @ch.elexis.core.ui.laboratory@ Plug-In for laboratory related tasks.
* @ch.elexis.core.ui.p2@ Plug-In to realize client side p2 update tasks
* @ch.elexis.core.common.feature@	Headless Core Feature.
* @ch.elexis.core.ui.feature@ Core UI Feature.
* @ch.elexis.core.application.feature@ Core Application Feature.

For details about the resp. plug-ins/features switch to the respective directory. The plug-ins and features
are contained and inter-dependent as follows:

!FeatureStructure.png!


h3. internationalization (i18n)

We use "Trema":http://netceteragroup.github.io/trema-eclipse/. It is comprised of an Eclipse-Plugin, which has a nice editor for the texts.trm file placed at the root of
each project which has messages to be translated into different languages. The "Trema maven plugin":http://netceteragroup.github.io/trema-maven/ creates messages_<lang>.properties
files in an early build phase.

With the Tream plugin each save action updates the messages*.properties files specified in the pom.xml. But no new constants are added to the Messages.java file. This must be done manually.

For finding the name of the localized string (e.g. in a dialog), it is helpful to activate the line @<filter>addkeytovalue</filter>@ (see "pom.xml":ch.elexis.core.ui/pom.xml).
After rebuilding each localized string gets the name of the key appended.