<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>ch.elexis</groupId>
		<artifactId>elexis-3-core</artifactId>
		<version>3.0.0-SNAPSHOT</version>
	</parent>
	<artifactId>ch.elexis.core.p2site</artifactId>
	<packaging>eclipse-repository</packaging>
	<profiles>
		<profile>
			<id>install_build</id>
			<activation>
				<property>
					<name>ROOT</name>
				</property>
			</activation>
			<build>
      <plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.3.2</version>
						<executions>
							<execution>
								<phase>install</phase>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
							<configuration>
								<executable>${project.basedir}/install_build.rb</executable>
								<arguments>
									<argument>${ROOT}</argument>
								</arguments>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<build>
		<plugins>
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>groovy-maven-plugin</artifactId>
        <version>2.0</version>
          <executions>
            <execution>
              <id>set-properties</id>
              <phase>validate</phase>
              <goals>
                <goal>execute</goal>
              </goals>
              <configuration>
              <source>
                import java.text.SimpleDateFormat;
                String repo_variant = "${repo_variant}" // project.properties.getProperty('repo_variant') always return snapshot
                <!-- for snapshot we want an 'a' << 'b' (beta) << 'r' (prerelease and release) -->
                String groovyQualifier = new SimpleDateFormat("'"+repo_variant.substring(0,1).replaceFirst('s','a').replaceFirst('p','r')+"'yyyyMMdd-HHmm").format(Calendar.getInstance().getTime())
                println 'repo_variant: ' + repo_variant + ' -> groovyQualifier: '+ groovyQualifier
                project.properties.setProperty('groovyBuildQualifier', groovyQualifier)
              </source>
              </configuration>
            </execution>
            <execution>
              <phase>generate-resources</phase>
              <goals>
                <goal>execute</goal>
              </goals>
              <configuration>
                <source>
                  println 'Hello'
                </source>
              </configuration>
            </execution>
        </executions>
      </plugin>
			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>replacer</artifactId>
				<version>1.5.3</version>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>replace</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<outputDir>../ch.elexis.core.p2site</outputDir>
					<basedir>ch.elexis.core.application</basedir>
					<filesToInclude>repo.properties,Elexis.p2.inf</filesToInclude>
					<replacements>
						<replacement>
							<token>project_name</token>
							<value>${project.name}</value>
						</replacement>
						<replacement>
							<token>project_version</token>
							<value>${project.version}</value>
						</replacement>
						<replacement>
							<token>buildQualifier</token>
							<!-- we want to take the actual time to update the snapshots! -->
							<value>${groovyBuildQualifier}</value>
						</replacement>
						<replacement>
							<token>versionFromPomViaGroovy</token>
							<!-- we want to take versionFromPomViaGroovy from ch.elexis.core.data/pom.xml -->
							<value>${versionFromPomViaGroovy}</value>
						</replacement>
						<replacement>
							<token>unqualifiedVersion</token>
							<value>${unqualifiedVersion}</value>
						</replacement>
						<replacement>
							<token>repo_name</token>
							<value>${repo_name}</value>
						</replacement>
						<replacement>
							<token>repo_variant</token>
							<value>${repo_variant}</value>
						</replacement>
					</replacements>
				</configuration>
			</plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.7</version>
        <executions>
          <execution>
            <id>create-archive</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}</outputDirectory>
              <resources>
                <!-- We have to copy the Elexis.product, as we cannot build a plug-in
                  and a target inside the same Maven project (or at least don't know howto)
                  Under Linux a symbolic link would suffice. But this did not work under Windows -->
                <resource>
                  <directory>${project.parent.basedir}/ch.elexis.core.application</directory>
                  <includes>
                    <include>Elexis.product</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
			<plugin>
				<!-- Remove Elexis.product on clean -->
				<artifactId>maven-clean-plugin</artifactId>
				<version>2.5 </version>
				<configuration>
					<filesets>
						<fileset>
							<directory>${basedir}</directory>
							<includes>
								<include>repo.properties</include>
								<include>Elexis.product</include>
								<include>Elexis.p2.inf</include>
							</includes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.eclipse.tycho </groupId>
				<artifactId>tycho-p2-repository-plugin</artifactId>
				<configuration>
					<includeAllDependencies>true</includeAllDependencies>
					<profileProperties>
						<macosx-bundled>true</macosx-bundled>
					</profileProperties>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.eclipse.tycho </groupId>
				<artifactId>tycho-p2-director-plugin</artifactId>
				<executions>
					<execution>
						<id>materialize-products</id>
						<goals>
							<goal>materialize-products</goal>
						</goals>
					</execution>
					<execution>
						<id>archive-products</id>
						<goals>
							<goal>archive-products</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<products>
						<product>
							<id>ch.elexis.core.application.ElexisApp</id>
							<rootFolder></rootFolder>
							<rootFolders>
								<macosx>Elexis3.app</macosx>
								<win32></win32>
							</rootFolders>
						</product>
					</products>
				</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.github.goldin</groupId>
										<artifactId>
											copy-maven-plugin
										</artifactId>
										<versionRange>
											[0.2.5,)
										</versionRange>
										<goals>
											<goal>copy</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											com.google.code.maven-replacer-plugin
										</groupId>
										<artifactId>
											replacer
										</artifactId>
										<versionRange>
											[1.5.3,)
										</versionRange>
										<goals>
											<goal>replace</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>